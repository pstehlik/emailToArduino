apply plugin: "groovy"
apply plugin:'application'

group = 'gradle'
version = '1.0'
mainClassName = "com.pstehlik.serialEps.Starter"

repositories {
  mavenCentral()
  flatDir dirs: 'lib'
}

dependencies {
  compile "javax.mail:mail:1.4"
  //for testing with spock
  groovy "org.codehaus.groovy:groovy-all:1.7.4"
  testCompile "org.spockframework:spock-core:0.4-groovy-1.7"
  testCompile "cglib:cglib-nodep:2.2"
  testCompile "junit:junit:4.8.1"
  compile 'org.slf4j:slf4j-log4j12:1.5.2'
  testCompile group: 'junit', name: 'junit', version: '4.7'
  groovy name: "RXTXcomm"
}


final def GRADLE_TEST_LIBRARIES_ID = 'Gradle Test Libraries'
task intellijSync << {
  description = 'Add gradle dependecies to IntelliJ project library'

  final def librariesDir = new File(".idea${File.separator}libraries")
  librariesDir.mkdirs()

  final def userHomeGradle = project.gradle.gradleUserHomeDir
  println "Set the USER_HOME_GRADLE variable to '$userHomeGradle.path'"

  def makeJarList = { path ->
    path.split(File.pathSeparator).collect {
      it.replaceAll userHomeGradle.path, "\\\$USER_HOME_GRADLE\\\$"
    }
  }
  final def compileJars = makeJarList(configurations.compile.asPath)
  final def testJars = makeJarList(configurations.testCompile.asPath) - compileJars

  def createLibrary = { fileName, libraryName, jars ->
    final def gradleLibXml = new File(librariesDir, fileName)
    gradleLibXml.write """
<component name="libraryTable">
  <library name="$libraryName"/>
</component>"""
    final def xmlRoot = new XmlParser().parse(gradleLibXml)
    final def classesNode = xmlRoot.library[0].appendNode('CLASSES')

    jars.each { jar ->
      classesNode.appendNode('root', [url: "jar://$jar!/"])
    }

    def writer = new StringWriter()
    new XmlNodePrinter(new PrintWriter(writer)).print(xmlRoot)
    gradleLibXml.write writer.toString()
    println "File '${gradleLibXml.path}' updated"
  }
  createLibrary 'Gradle_Libraries.xml', 'Gradle Libraries', compileJars
  createLibrary 'Gradle_Test_Libraries.xml', GRADLE_TEST_LIBRARIES_ID, testJars
}

task intellijModuleSync(dependsOn: intellijSync) << {
  final def moduleFile = new File('serialEarlyPayments.iml') // TODO rename to match your module's name
  def root = new XmlParser().parse(moduleFile)
  def newModuleRootManager = root.component.find {it.'@name' == 'NewModuleRootManager'}
  def orderEntry = newModuleRootManager.orderEntry.find {
    it.'@type' == 'library' && it.'@name' == GRADLE_TEST_LIBRARIES_ID
  }
  if (orderEntry) {
    newModuleRootManager.remove(orderEntry)
  }
  newModuleRootManager.appendNode('orderEntry', [type: 'library', scope: 'TEST', name: GRADLE_TEST_LIBRARIES_ID, level: 'project'])

  def writer = new StringWriter()
  new XmlNodePrinter(new PrintWriter(writer)).print(root)
  moduleFile.write writer.toString()
  println "File '${moduleFile.path}' updated"
}